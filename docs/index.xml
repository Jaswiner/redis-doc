<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docs on Redis Doc</title>
    <link>https://jaswine.com/docs/redis/docs/</link>
    <description>Recent content in Docs on Redis Doc</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://jaswine.com/docs/redis/docs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/common/ds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/common/ds/</guid>
      <description> Redis中的数据类型 数据类型及其对应的数据结构 Redis中有五种数据类型:
   数据类型 value底层数据结构 特点     STRING 字符串    LIST 链表    HASH hash表    SET     ZSET      </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/common/spec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/common/spec/</guid>
      <description> Key命名规范 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/common/springboot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/common/springboot/</guid>
      <description> SpringBoot连接Redis @Version:2.1.5.RELEASE
@SpringBoot使用Doc:🔗SpringBoot Doc @ Jaswine
1.导入依赖包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-redis&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  2.配置(yaml) spring: redis: # 基础配置 database: 0 host: 127.0.0.1 port: 6379 password: 123456 # 连接池配置 jedis: pool: max-active: 8 max-wait: -1ms max-idle: 8 min-idle: 0  3.使用 @RunWith(SpringJUnit4ClassRunner.class) @SpringApplicationConfiguration(Application.class) public class ApplicationTests { @Autowired private StringRedisTemplate stringRedisTemplate; @Test public void test() throws Exception { // 保存字符串 stringRedisTemplate.opsForValue().set(&amp;quot;aaa&amp;quot;, &amp;quot;111&amp;quot;); Assert.assertEquals(&amp;quot;111&amp;quot;, stringRedisTemplate.opsForValue().get(&amp;quot;aaa&amp;quot;)); } }  附1:配置持久化 附2:不同数据类型的操作函数 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/config/base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/config/base/</guid>
      <description> Redis基础配置 配置Redis的基础信息:
 端口 密码 绑定主机 守护进程模式运行 pid地址  Redis配置文件地址  yum安装的地址 /etc/redis.conf  修改端口 port 6379  设置密码 requirepass xxxx  绑定主机 bind 0.0.0.0  守护进程模式运行 daemonize yes  pid地址 pidfile /var/run/redis.pid  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/config/key_expired/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/config/key_expired/</guid>
      <description>Key过期时间配置 key的过期时间配置使用Redis的命令行：
EXPIRE [key_name] 30  ps:默认时间单位为秒</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/config/persistence/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/config/persistence/</guid>
      <description> 数据持久化 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/config/value_expired/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/config/value_expired/</guid>
      <description> 内存淘汰策略 当Redis中内存满的情况下，要对一些key进行淘汰
配置淘汰策略 修改Redis配置文件
maxmemory 10000000 配置内存阈值(单位为byte) maxmemory-policy noeviction 配置淘汰策略  淘汰策略说明  noeviction(默认策略)：当内存不足以容纳新写入数据时，新写入操作会报错。 allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。 allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。 volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。 volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。 volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/data_type/hash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/data_type/hash/</guid>
      <description> Redis中Hash数据类型及其操作 使用场景  1.存储对象  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/data_type/list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/data_type/list/</guid>
      <description> Redis中String数据类型机器操作 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/data_type/set/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/data_type/set/</guid>
      <description> Redis中String数据类型机器操作 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/data_type/string/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/data_type/string/</guid>
      <description> Redis中String数据类型及其操作 常用操作 使用场景  1.保存单个数据&amp;amp;Json字符串
 2.计数器
  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/data_type/zset/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/data_type/zset/</guid>
      <description> Redis中String数据类型机器操作 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/install/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/install/docker/</guid>
      <description> 使用Docker安装Redis # 1.拉取镜像 docker pull  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/install/yum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/install/yum/</guid>
      <description> 使用YUM安装Redis // 1.查询是否有可以安装的包 yum list redis // 2.没有的话安装仓库 yum install epel-release // 3.安装Redis yum install redis // 4.启动Redis systemctl start redis  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/scenes/db/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/scenes/db/</guid>
      <description> 缓存数据库热点数据 </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jaswine.com/docs/redis/docs/scenes/lock/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jaswine.com/docs/redis/docs/scenes/lock/</guid>
      <description> 使用Redis实现分布式锁 </description>
    </item>
    
  </channel>
</rss>